#############################################################################
##
#W  transducer.xml
#Y  Copyright (C) 2017                                Fernando Flores Brito
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="Transducer">
<ManSection>
  <Oper Name = "Transducer" Arg = "m, n, P, L"/>
  <Returns>A transducer.</Returns>
  <Description>
    For two positive integers <A>m</A>, and <A>n</A>, a dense list of dense
    lists of integers <A>P</A>, and a dense list of dense lists of dense lists
    of integers <A>L</A>, such that <A>P</A> and <A>L</A> have the same size,
    and each of their elements have size equal to <A>m</A>, the operation
    <C>Transducer(<A>m, n, P, L</A>)</C> returns a transducer with input
    alphabet <C>[0 .. m - 1]</C>, output alphabet <C>[0 .. n - 1]</C>,
    transition function <A>P</A>, and output function <A>L</A>. If <C>p</C>
    abstractly represents the transition function of the transducer, then
    <A>P</A> has the property that <C>p(currentstate, inputletter - 1) =
    <A>P</A>[currentstate][inputletter]</C>, where <C>currentstate</C> is an
    integer from <C>[1 .. Size(<A>P</A>)]</C>, and <C>inputletter</C> is a
    positive integer representing the word <C>[inputletter - 1]</C>. Similarly,
    if <C>l</C> abstractly represents the output function of the transducer,
    then <A>L</A> has the property that <C>l(currentstate, inputletter - 1) =
    <A>L</A>[currentstate][inputletter]</C>, where <C>currentstate</C>, and
    <C>inputletter</C> are as before.

    <Example><![CDATA[
gap> T := Transducer(2, 2, [[2, 3], [2, 3], [2, 3]],
> 			   [[[], []], [[0], [0]], [[1], [1]]]);
<transducer with input alphabet on 2 symbols, output alphabet on 2 symbols,
  and 3 states.>
  ]]></Example>
 </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="TransducerFunction">
<ManSection>
  <Oper Name = "TransducerFunction" Arg = "T, word, m"/>
  <Returns>A list.</Returns>
  <Description>
    For a transducer <A>T</A>, a dense list <A>word</A>, and a positive integer
    <A>m</A> such that it is a state of the transducer, the operation
    <C>TransducerFunction(<A>T, word, m</A>)</C> returns a list containing the
    word obtained when <A>word</A> is read by <A>T</A> from state <A>m</A>, and
    the state that is reached after reading <A>word</A> from state <A>m</A>.
    <Example><![CDATA[
gap> T := Transducer(2, 2, [[1, 2], [2, 1]], [[[0], []], [[1], [0, 1]]]);;
gap> TransducerFunction(T, [0, 1, 0], 1);
[ [ 0, 1 ], 2 ]
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="XFunction">
  <ManSection><Heading>XFunction</Heading>
    <Oper Name = "TransitionFunction" Arg = "T"/>
    <Oper Name = "OutputFunction" Arg = "T"/>
    <Returns>A list.</Returns>
    <Description>
      For a transducer <A>T</A>, the operation
      <C>TransitionFunction(<A>T</A>)</C> displays the list representing the
      transition function of <A>T</A>, and the operation
      <C>OutputFunction(<A>T</A>)</C> displays the list representing the output
      function of <A>T</A>.
      <Example><![CDATA[
gap> T := Transducer(2, 2, [[1, 2], [2, 1]], [[[0], []], [[1], [0, 1]]]);;
gap> TransitionFunction(T);
[ [ 1, 2 ], [ 2, 1 ] ]
gap> OutputFunction(T);
[ [ [ 0 ], [  ] ], [ [ 1 ], [ 0, 1 ] ] ]
]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="XAlphabet">
  <ManSection><Heading>XAlphabet</Heading>
    <Oper Name = "InputAlphabet" Arg = "T"/>
    <Oper Name = "OutputAlphabet" Arg = "T"/>
    <Returns>A list.</Returns>
    <Description>
      For a transducer <A>T</A>, the operation
      <C>InputAlphabet(<A>T</A>)</C> returns the list representing the
      input alphabet of <A>T</A>, and the operation
      <C>OutputAlphabet(<A>T</A>)</C> returns the list representing the output
      alphabet of <A>T</A>.
      <Example><![CDATA[
gap> P := Transducer(2, 3, [[1, 2], [2, 1]], [[[0], [2]], [[1], [0, 1]]]);;
gap> InputAlphabet(P);
[ 0, 1 ]
gap> OutputAlphabet(P);
[ 0 .. 2 ]
]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="NrStates">
  <ManSection>
    <Oper Name = "NrStates" Arg = "T"/>
    <Returns>A positive integer.</Returns>
    <Description>
      For a transducer <A>T</A>, the operation <C>NrStates(<A>T</A>)</C> returns
      the number of states of the transducer <A>T</A>.
      <Example><![CDATA[
gap> T := Transducer(2, 2, [[1, 2], [2, 1]], [[[0], []], [[1], [0, 1]]]);;
gap> NrStates(T);
2
]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="States">
  <ManSection>
    <Oper Name = "States" Arg = "T"/>
    <Returns>A list of integers.</Returns>
    <Description>
      For a transducer <A>T</A>, the operation <C>States(<A>T</A>)</C> returns
      a list representing the set of states of the transducer <A>T</A>.
      <Example><![CDATA[
gap> T := Transducer(2, 2, [[1, 2], [2, 1]], [[[0], []], [[1], [0, 1]]]);;
gap> States(T);
[ 1, 2 ]
]]></Example>
    </Description>
  </ManSection>

<#/GAPDoc>
<#GAPDoc Label="NrXSymbols">
  <ManSection><Heading>NrXSymbols</Heading>
    <Oper Name = "NrInputSymbols" Arg = "T"/>
    <Oper Name = "NrOutputSymbols" Arg = "T"/>
    <Returns>A positive integer.</Returns>
    <Description>
      For a transducer <A>T</A>, the operation <C>NrInputSymbols(<A>T</A>)</C>
      returns the number of symbols of the input alphabet of <A>T</A>, and the
      operation <C>NrOutputSymbols(<A>T</A>)</C> returns the number of symbols
      of the output alphabet of <A>T</A>.

      <Example><![CDATA[
gap> T := Transducer(2, 3, [[1, 2], [2, 1]], [[[0], []], [[1], [2, 1]]]);;
gap> NrInputSymbols(T); NrOutputSymbols(T);
2
3
]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>
