InstallMethod(L2Examples, "for a pos int", [IsPosInt],
function(i)
  local DataList;
    DataList := [];
    Add(DataList, [ [ [ 1, 1 ] ], [ [ [ 0 ], [ 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 1 ] ], [ [ [ 1 ], [ 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 1, 2 ], [ 1, 5 ], [ 1, 5 
  ] ], [ [ [ 0 ], [ 1 ] ], [ [ ], [ ] ], [ [ 1, 0 ], [ 0, 1 ] ], [ [ 0, 
  0 ], [ 1, 1 ] ], [ [ 0 ], [ 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 2 ], [ 4, 5 ], [ 1, 2 ], [ 3, 2 
  ] ], [ [ [ 0 ], [ 1 ] ], [ [ 0 ], [ 1 ] ], [ [ ], [ ] ], [ [ 0, 0 ], [
   1, 1 ] ], [ [ 1, 0 ], [ 0, 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 1, 2 ], [ 1, 5 ], [ 1, 5 
  ] ], [ [ [ 1 ], [ 0 ] ], [ [ ], [ ] ], [ [ 0, 1 ], [ 1, 0 ] ], [ [ 1, 
  1 ], [ 0, 0 ] ], [ [ 1 ], [ 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 2 ], [ 4, 5 ], [ 1, 2 ], [ 3, 2 
  ] ], [ [ [ 1 ], [ 0 ] ], [ [ 1 ], [ 0 ] ], [ [ ], [ ] ], [ [ 1, 1 ], [
   0, 0 ] ], [ [ 0, 1 ], [ 1, 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 1, 5 ], [ 3, 6 ], [ 3, 4 
  ], [ 3, 6 ] ], [ [ [ 0 ], [ ] ], [ [ 1, 1, 0 ], [ 0 ] ], [ [ ], [ ] ],
   [ [ 0, 1, 0 ], [ 1, 1, 1 ] ], [ [ 1, 0 ], [ ] ], [ [ 0 ], [ 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 6, 4 ], [ 1, 2 
  ], [ 5, 2 ] ], [ [ [ 0 ], [ 1 ] ], [ [ ], [ ] ], [ [ ], [ 0, 1 ] ], [ 
  [ ], [ 1 ] ], [ [ 0, 0, 0 ], [ 1, 0, 1 ] ], [ [ 1 ], [ 0, 0, 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 1, 5 ], [ 3, 6 ], [ 3, 4 
  ], [ 3, 6 ] ], [ [ [ 1 ], [ ] ], [ [ 0, 0, 1 ], [ 1 ] ], [ [ ], [ ] ],
   [ [ 1, 0, 1 ], [ 0, 0, 0 ] ], [ [ 0, 1 ], [ ] ], [ [ 1 ], [ 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 6, 4 ], [ 1, 2 
  ], [ 5, 2 ] ], [ [ [ 1 ], [ 0 ] ], [ [ ], [ ] ], [ [ ], [ 1, 0 ] ], [ 
  [ ], [ 0 ] ], [ [ 1, 1, 1 ], [ 0, 1, 0 ] ], [ [ 0 ], [ 1, 1, 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 1, 5 ], [ 6, 5 ], [ 6, 5 
  ], [ 1, 5 ] ], [ [ [ 0 ], [ 1 ] ], [ [ ], [ ] ], [ [ 0, 0 ], [ 1, 1 ] 
  ], [ [ 1, 0 ], [ 0, 1 ] ], [ [ 0 ], [ 1 ] ], [ [ 0 ], [ 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 1, 3 ], [ 4, 5 ], [ 1, 2 ], [ 1, 6 
  ], [ 1, 6 ] ], [ [ [ 0 ], [ 1 ] ], [ [ 0 ], [ 1 ] ], [ [ ], [ ] ], [ [
   1, 0 ], [ 0, 1 ] ], [ [ 0, 0 ], [ 1, 1 ] ], [ [ 0 ], [ 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 2 ], [ 4, 2 ], [ 5, 6 ], [ 1, 2 
  ], [ 3, 2 ] ], [ [ [ 0 ], [ 1 ] ], [ [ 0 ], [ 1 ] ], [ [ 0 ], [ 1 ] ],
   [ [ ], [ ] ], [ [ 0, 0 ], [ 1, 1 ] ], [ [ 1, 0 ], [ 0, 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 1, 3 ], [ 4, 3 ], [ 5, 6 ], [ 1, 2 
  ], [ 1, 3 ] ], [ [ [ 0 ], [ 1 ] ], [ [ 0 ], [ 1 ] ], [ [ 0 ], [ 1 ] ],
   [ [ ], [ ] ], [ [ 1, 0 ], [ 0, 1 ] ], [ [ 0, 0 ], [ 1, 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 1, 5 ], [ 6, 5 ], [ 6, 5 
  ], [ 1, 5 ] ], [ [ [ 1 ], [ 0 ] ], [ [ ], [ ] ], [ [ 1, 1 ], [ 0, 0 ] 
  ], [ [ 0, 1 ], [ 1, 0 ] ], [ [ 1 ], [ 0 ] ], [ [ 1 ], [ 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 1, 3 ], [ 4, 5 ], [ 1, 2 ], [ 1, 6 
  ], [ 1, 6 ] ], [ [ [ 1 ], [ 0 ] ], [ [ 1 ], [ 0 ] ], [ [ ], [ ] ], [ [
   0, 1 ], [ 1, 0 ] ], [ [ 1, 1 ], [ 0, 0 ] ], [ [ 1 ], [ 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 2 ], [ 4, 2 ], [ 5, 6 ], [ 1, 2 
  ], [ 3, 2 ] ], [ [ [ 1 ], [ 0 ] ], [ [ 1 ], [ 0 ] ], [ [ 1 ], [ 0 ] ],
   [ [ ], [ ] ], [ [ 1, 1 ], [ 0, 0 ] ], [ [ 0, 1 ], [ 1, 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 1, 3 ], [ 4, 3 ], [ 5, 6 ], [ 1, 2 
  ], [ 1, 3 ] ], [ [ [ 1 ], [ 0 ] ], [ [ 1 ], [ 0 ] ], [ [ 1 ], [ 0 ] ],
   [ [ ], [ ] ], [ [ 0, 1 ], [ 1, 0 ] ], [ [ 1, 1 ], [ 0, 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ], [ 3, 6 ], [ 1, 7 
  ], [ 3, 6 ], [ 3, 4 ] ], [ [ [ 0 ], [ ] ], [ [ 1, 1, 0 ], [ 0 ] ], [ [
   0 ], [ 1 ] ], [ [ 0, 1, 0 ], [ 1, 1, 1 ] ], [ [ ], [ ] ], [ [ 0 ], [ 
  1 ] ], [ [ 1, 0 ], [ ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 6, 7 ], [ 1, 2 
  ], [ 1, 2 ], [ 1, 7 ] ], [ [ [ 0 ], [ 1 ] ], [ [ ], [ ] ], [ [ ], [ 0,
   1 ] ], [ [ ], [ 1, 1 ] ], [ [ 0, 0, 0 ], [ 1, 0, 1 ] ], [ [ 1, 0, 0 ]
  , [ 0, 0, 1 ] ], [ [ 0 ], [ 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 6, 7 ], [ 1, 2 
  ], [ 1, 2 ], [ 1, 7 ] ], [ [ [ 0 ], [ 1 ] ], [ [ ], [ ] ], [ [ ], [ 0,
   1 ] ], [ [ ], [ 1, 1 ] ], [ [ 1, 0, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, 0 ]
  , [ 1, 0, 1 ] ], [ [ 0 ], [ 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 1, 6 ], [ 1, 2 
  ], [ 1, 7 ], [ 1, 7 ] ], [ [ [ 0 ], [ 1 ] ], [ [ ], [ ] ], [ [ 1 ], [ 
  0, 1 ] ], [ [ 0, 0 ], [ 1 ] ], [ [ 1, 0 ], [ 0, 1 ] ], [ [ 0, 0 ], [ 1
  , 1 ] ], [ [ 0 ], [ 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 2 ], [ 4, 5 ], [ 6, 2 ], [ 3, 7 
  ], [ 1, 2 ], [ 3, 2 ] ], [ [ [ 0 ], [ 1 ] ], [ [ 0 ], [ 1 ] ], [ [ ], 
  [ ] ], [ [ 0 ], [ 1, 1 ] ], [ [ 1, 0 ], [ 0 ] ], [ [ 0, 0 ], [ 1, 1 ] 
  ], [ [ 1, 0 ], [ 0, 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 2 ], [ 4, 5 ], [ 1, 6 ], [ 3, 7 
  ], [ 3, 2 ], [ 3, 2 ] ], [ [ [ 0 ], [ 1 ] ], [ [ 0 ], [ 1 ] ], [ [ ], 
  [ ] ], [ [ 0, 0 ], [ ] ], [ [ 1, 0 ], [ ] ], [ [ 0, 1, 0 ], [ 1, 1, 1 
  ] ], [ [ 1, 1, 0 ], [ 0, 1, 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 2 ], [ 4, 5 ], [ 1, 6 ], [ 3, 7 
  ], [ 3, 2 ], [ 3, 2 ] ], [ [ [ 0 ], [ 1 ] ], [ [ 0 ], [ 1 ] ], [ [ ], 
  [ ] ], [ [ 0, 0 ], [ ] ], [ [ 1, 0 ], [ ] ], [ [ 1, 1, 0 ], [ 0, 1, 1 
  ] ], [ [ 0, 1, 0 ], [ 1, 1, 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 1, 3 ], [ 4, 5 ], [ 6, 2 ], [ 7, 5 
  ], [ 1, 2 ], [ 6, 2 ] ], [ [ [ 0 ], [ 1 ] ], [ [ 0 ], [ 1 ] ], [ [ ], 
  [ ] ], [ [ ], [ 0, 1 ] ], [ [ ], [ 1 ] ], [ [ 0, 0, 0 ], [ 1, 0, 1 ] ]
  , [ [ 1 ], [ 0, 0, 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ], [ 3, 6 ], [ 1, 7 
  ], [ 3, 6 ], [ 3, 4 ] ], [ [ [ 1 ], [ ] ], [ [ 0, 0, 1 ], [ 1 ] ], [ [
   1 ], [ 0 ] ], [ [ 1, 0, 1 ], [ 0, 0, 0 ] ], [ [ ], [ ] ], [ [ 1 ], [ 
  0 ] ], [ [ 0, 1 ], [ ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 6, 7 ], [ 1, 2 
  ], [ 1, 2 ], [ 1, 7 ] ], [ [ [ 1 ], [ 0 ] ], [ [ ], [ ] ], [ [ ], [ 1,
   0 ] ], [ [ ], [ 0, 0 ] ], [ [ 0, 1, 1 ], [ 1, 1, 0 ] ], [ [ 1, 1, 1 ]
  , [ 0, 1, 0 ] ], [ [ 1 ], [ 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 6, 7 ], [ 1, 2 
  ], [ 1, 2 ], [ 1, 7 ] ], [ [ [ 1 ], [ 0 ] ], [ [ ], [ ] ], [ [ ], [ 1,
   0 ] ], [ [ ], [ 0, 0 ] ], [ [ 1, 1, 1 ], [ 0, 1, 0 ] ], [ [ 0, 1, 1 ]
  , [ 1, 1, 0 ] ], [ [ 1 ], [ 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 1, 6 ], [ 1, 2 
  ], [ 1, 7 ], [ 1, 7 ] ], [ [ [ 1 ], [ 0 ] ], [ [ ], [ ] ], [ [ 0 ], [ 
  1, 0 ] ], [ [ 1, 1 ], [ 0 ] ], [ [ 0, 1 ], [ 1, 0 ] ], [ [ 1, 1 ], [ 0
  , 0 ] ], [ [ 1 ], [ 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 2 ], [ 4, 5 ], [ 6, 2 ], [ 3, 7 
  ], [ 1, 2 ], [ 3, 2 ] ], [ [ [ 1 ], [ 0 ] ], [ [ 1 ], [ 0 ] ], [ [ ], 
  [ ] ], [ [ 1 ], [ 0, 0 ] ], [ [ 0, 1 ], [ 1 ] ], [ [ 1, 1 ], [ 0, 0 ] 
  ], [ [ 0, 1 ], [ 1, 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 2 ], [ 4, 5 ], [ 1, 6 ], [ 3, 7 
  ], [ 3, 2 ], [ 3, 2 ] ], [ [ [ 1 ], [ 0 ] ], [ [ 1 ], [ 0 ] ], [ [ ], 
  [ ] ], [ [ 1, 1 ], [ ] ], [ [ 0, 1 ], [ ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 
  ] ], [ [ 1, 0, 1 ], [ 0, 0, 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 2 ], [ 4, 5 ], [ 1, 6 ], [ 3, 7 
  ], [ 3, 2 ], [ 3, 2 ] ], [ [ [ 1 ], [ 0 ] ], [ [ 1 ], [ 0 ] ], [ [ ], 
  [ ] ], [ [ 1, 1 ], [ ] ], [ [ 0, 1 ], [ ] ], [ [ 1, 0, 1 ], [ 0, 0, 0 
  ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 1, 3 ], [ 4, 5 ], [ 6, 2 ], [ 7, 5 
  ], [ 1, 2 ], [ 6, 2 ] ], [ [ [ 1 ], [ 0 ] ], [ [ 1 ], [ 0 ] ], [ [ ], 
  [ ] ], [ [ ], [ 1, 0 ] ], [ [ ], [ 0 ] ], [ [ 1, 1, 1 ], [ 0, 1, 0 ] ]
  , [ [ 0 ], [ 1, 1, 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ], [ 7, 4 ], [ 1, 8 
  ], [ 3, 4 ], [ 5, 8 ], [ 3, 4 ] ], [ [ [ 0 ], [ ] ], [ [ 0, 0 ], [ 1, 
  0, 1, 1 ] ], [ [ 1, 0 ], [ ] ], [ [ 0 ], [ 1 ] ], [ [ ], [ 0 ] ], [ [ 
  1, 0 ], [ 0, 0, 1, 1 ] ], [ [ ], [ ] ], [ [ ], [ 1, 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 1, 5 ], [ 3, 6 ], [ 3, 7 
  ], [ 3, 8 ], [ 3, 6 ], [ 3, 8 ] ], [ [ [ 0 ], [ ] ], [ [ 0, 1, 0 ], [ 
  ] ], [ [ ], [ ] ], [ [ 1, 1, 1, 0 ], [ 0 ] ], [ [ 1, 0 ], [ ] ], [ [ 0
  , 1, 1, 0 ], [ 1, 1, 1, 1 ] ], [ [ 1, 1, 0 ], [ ] ], [ [ 0 ], [ 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 6, 4 ], [ 7, 2 
  ], [ 8, 2 ], [ 1, 2 ], [ 7, 2 ] ], [ [ [ 0 ], [ 1 ] ], [ [ ], [ ] ], [
   [ ], [ 0, 1 ] ], [ [ ], [ 1 ] ], [ [ ], [ 0, 0, 1 ] ], [ [ ], [ 1, 0,
   1 ] ], [ [ 0, 0, 0, 0 ], [ 1, 0, 0, 1 ] ], [ [ 1 ], [ 0, 0, 0, 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 1, 5 ], [ 3, 6 ], [ 7, 4 
  ], [ 8, 6 ], [ 1, 5 ], [ 1, 5 ] ], [ [ [ 0 ], [ 1 ] ], [ [ ], [ ] ], [
   [ 0, 0 ], [ ] ], [ [ 1 ], [ ] ], [ [ ], [ 0, 1 ] ], [ [ ], [ 1 ] ], [
   [ 1, 1, 0, 0 ], [ 0, 1 ] ], [ [ 0, 1, 0, 0 ], [ 1, 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ], [ 7, 4 ], [ 1, 8 
  ], [ 3, 4 ], [ 5, 8 ], [ 3, 4 ] ], [ [ [ 1 ], [ ] ], [ [ 1, 1 ], [ 0, 
  1, 0, 0 ] ], [ [ 0, 1 ], [ ] ], [ [ 1 ], [ 0 ] ], [ [ ], [ 1 ] ], [ [ 
  0, 1 ], [ 1, 1, 0, 0 ] ], [ [ ], [ ] ], [ [ ], [ 0, 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 1, 5 ], [ 3, 6 ], [ 3, 7 
  ], [ 3, 8 ], [ 3, 6 ], [ 3, 8 ] ], [ [ [ 1 ], [ ] ], [ [ 1, 0, 1 ], [ 
  ] ], [ [ ], [ ] ], [ [ 0, 0, 0, 1 ], [ 1 ] ], [ [ 0, 1 ], [ ] ], [ [ 1
  , 0, 0, 1 ], [ 0, 0, 0, 0 ] ], [ [ 0, 0, 1 ], [ ] ], [ [ 1 ], [ 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 6, 4 ], [ 7, 2 
  ], [ 8, 2 ], [ 1, 2 ], [ 7, 2 ] ], [ [ [ 1 ], [ 0 ] ], [ [ ], [ ] ], [
   [ ], [ 1, 0 ] ], [ [ ], [ 0 ] ], [ [ ], [ 1, 1, 0 ] ], [ [ ], [ 0, 1,
   0 ] ], [ [ 1, 1, 1, 1 ], [ 0, 1, 1, 0 ] ], [ [ 0 ], [ 1, 1, 1, 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 1, 5 ], [ 3, 6 ], [ 7, 4 
  ], [ 8, 6 ], [ 1, 5 ], [ 1, 5 ] ], [ [ [ 1 ], [ 0 ] ], [ [ ], [ ] ], [
   [ 1, 1 ], [ ] ], [ [ 0 ], [ ] ], [ [ ], [ 1, 0 ] ], [ [ ], [ 0 ] ], [
   [ 0, 0, 1, 1 ], [ 1, 0 ] ], [ [ 1, 0, 1, 1 ], [ 0, 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ], [ 3, 7 ], [ 1, 8 
  ], [ 3, 4 ], [ 3, 9 ], [ 3, 4 ], [ 3, 9 ] ], [ [ [ 0 ], [ ] ], [ [ 1, 
  1, 1, 0 ], [ 0, 0 ] ], [ [ ], [ ] ], [ [ 0, 1, 0 ], [ ] ], [ [ ], [ ] 
  ], [ [ 1, 0 ], [ ] ], [ [ 0, 1, 1, 0 ], [ 1, 1, 1, 1 ] ], [ [ 1, 1, 0 
  ], [ 0 ] ], [ [ 0 ], [ 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 6, 7 ], [ 8, 2 
  ], [ 5, 2 ], [ 9, 7 ], [ 1, 2 ], [ 5, 2 ] ], [ [ [ 0 ], [ 1 ] ], [ [ ]
  , [ ] ], [ [ ], [ 0, 1 ] ], [ [ ], [ ] ], [ [ ], [ 1, 0, 1 ] ], [ [ 1 
  ], [ 0, 0, 1 ] ], [ [ ], [ 1 ] ], [ [ 0, 0, 0, 0 ], [ 1, 0, 0, 1 ] ], 
  [ [ 1, 1 ], [ 0, 0, 0, 1 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ], [ 3, 7 ], [ 1, 8 
  ], [ 3, 4 ], [ 3, 9 ], [ 3, 4 ], [ 3, 9 ] ], [ [ [ 1 ], [ ] ], [ [ 0, 
  0, 0, 1 ], [ 1, 1 ] ], [ [ ], [ ] ], [ [ 1, 0, 1 ], [ ] ], [ [ ], [ ] 
  ], [ [ 0, 1 ], [ ] ], [ [ 1, 0, 0, 1 ], [ 0, 0, 0, 0 ] ], [ [ 0, 0, 1 
  ], [ 1 ] ], [ [ 1 ], [ 0 ] ] ] ]);

    Add(DataList, [ [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 6, 7 ], [ 8, 2 
  ], [ 5, 2 ], [ 9, 7 ], [ 1, 2 ], [ 5, 2 ] ], [ [ [ 1 ], [ 0 ] ], [ [ ]
  , [ ] ], [ [ ], [ 1, 0 ] ], [ [ ], [ ] ], [ [ ], [ 0, 1, 0 ] ], [ [ 0 
  ], [ 1, 1, 0 ] ], [ [ ], [ 0 ] ], [ [ 1, 1, 1, 1 ], [ 0, 1, 1, 0 ] ], 
  [ [ 0, 0 ], [ 1, 1, 1, 0 ] ] ] ]);

  return TransducerCore(MinimalTransducer(Transducer(2, 2, DataList[i][1],
                                                           DataList[i][2])));
end);

InstallMethod(L3Examples, "for a pos int", [IsPosInt],
function(i)
  local data;
  data := [ [ [ [ 1, 1, 1 ] ], [ [ [ 0 ], [ 1 ], [ 2 ] ] ] ],
            [ [ [ 1, 1, 1 ] ], [ [ [ 0 ], [ 2 ], [ 1 ] ] ] ],
            [ [ [ 1, 1, 1 ] ], [ [ [ 1 ], [ 0 ], [ 2 ] ] ] ],
            [ [ [ 1, 1, 1 ] ], [ [ [ 1 ], [ 2 ], [ 0 ] ] ] ],
            [ [ [ 1, 1, 1 ] ], [ [ [ 2 ], [ 0 ], [ 1 ] ] ] ],
            [ [ [ 1, 1, 1 ] ], [ [ [ 2 ], [ 1 ], [ 0 ] ] ] ],
            [ [ [ 1, 1, 2 ], [ 1, 1, 2 ] ], [ [ [ 0 ], [ 1 ], [ 2 ] ],
              [ [ 1 ], [ 0 ], [ 2 ] ] ] ],
            [ [ [ 1, 2, 2 ], [ 1, 2, 2 ] ], [ [ [ 0 ], [ 1 ], [ 2 ] ],
              [ [ 0 ], [ 2 ], [ 1 ] ] ] ],
            [ [ [ 1, 2, 1 ], [ 1, 2, 1 ] ], [ [ [ 0 ], [ 1 ], [ 2 ] ],
              [ [ 2 ], [ 1 ], [ 0 ] ] ] ], 
            [ [ [ 1, 2, 2 ], [ 1, 2, 2 ] ], [ [ [ 0 ], [ 2 ], [ 1 ] ],
              [ [ 0 ], [ 1 ], [ 2 ] ] ] ],
            [ [ [ 1, 1, 2 ], [ 1, 1, 2 ] ], [ [ [ 0 ], [ 2 ], [ 1 ] ],
              [ [ 2 ], [ 0 ], [ 1 ] ] ] ], 
            [ [ [ 1, 2, 1 ], [ 1, 2, 1 ] ], [ [ [ 0 ], [ 2 ], [ 1 ] ],
              [ [ 1 ], [ 2 ], [ 0 ] ] ] ],
            [ [ [ 1, 1, 2 ], [ 1, 1, 2 ] ], [ [ [ 1 ], [ 0 ], [ 2 ] ],
              [ [ 0 ], [ 1 ], [ 2 ] ] ] ], 
            [ [ [ 1, 2, 2 ], [ 1, 2, 2 ] ], [ [ [ 1 ], [ 0 ], [ 2 ] ],
              [ [ 1 ], [ 2 ], [ 0 ] ] ] ],
            [ [ [ 1, 2, 1 ], [ 1, 2, 1 ] ], [ [ [ 1 ], [ 0 ], [ 2 ] ],
              [ [ 2 ], [ 0 ], [ 1 ] ] ] ], 
            [ [ [ 1, 2, 1 ], [ 1, 2, 1 ] ], [ [ [ 1 ], [ 2 ], [ 0 ] ],
              [ [ 0 ], [ 2 ], [ 1 ] ] ] ],
            [ [ [ 1, 2, 2 ], [ 1, 2, 2 ] ], [ [ [ 1 ], [ 2 ], [ 0 ] ],
              [ [ 1 ], [ 0 ], [ 2 ] ] ] ], 
            [ [ [ 1, 1, 2 ], [ 1, 1, 2 ] ], [ [ [ 1 ], [ 2 ], [ 0 ] ],
              [ [ 2 ], [ 1 ], [ 0 ] ] ] ],
            [ [ [ 1, 2, 1 ], [ 1, 2, 1 ] ], [ [ [ 2 ], [ 0 ], [ 1 ] ],
              [ [ 1 ], [ 0 ], [ 2 ] ] ] ], 
            [ [ [ 1, 1, 2 ], [ 1, 1, 2 ] ], [ [ [ 2 ], [ 0 ], [ 1 ] ],
              [ [ 0 ], [ 2 ], [ 1 ] ] ] ],
            [ [ [ 1, 2, 2 ], [ 1, 2, 2 ] ], [ [ [ 2 ], [ 0 ], [ 1 ] ],
              [ [ 2 ], [ 1 ], [ 0 ] ] ] ],
            [ [ [ 1, 2, 1 ], [ 1, 2, 1 ] ], [ [ [ 2 ], [ 1 ], [ 0 ] ],
              [ [ 0 ], [ 1 ], [ 2 ] ] ] ],
            [ [ [ 1, 2, 2 ], [ 1, 2, 2 ] ], [ [ [ 2 ], [ 1 ], [ 0 ] ],
              [ [ 2 ], [ 0 ], [ 1 ] ] ] ], 
            [ [ [ 1, 1, 2 ], [ 1, 1, 2 ] ], [ [ [ 2 ], [ 1 ], [ 0 ] ],
              [ [ 1 ], [ 2 ], [ 0 ] ] ] ],
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ], 
              [ [ [ 0 ], [  ], [  ] ], [ [ 1, 0 ], [ 2 ], [ 2 ] ],
              [ [ 2, 0 ], [ 1 ], [ 1 ] ] ] ],
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ], 
              [ [ [ 0 ], [  ], [  ] ], [ [ 2, 0 ], [ 1 ], [ 1 ] ],
              [ [ 1, 0 ], [ 2 ], [ 2 ] ] ] ], 
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ],
              [ [ [ 0 ], [ 0 ], [ 1, 2 ] ], [ [ 1 ], [ 1 ], [ 0, 2 ] ],
              [ [  ], [  ], [ 2 ] ] ] ],
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ], 
              [ [ [ 0 ], [ 0 ], [ 2, 1 ] ], [ [ 2 ], [ 2 ], [ 0, 1 ] ],
              [ [  ], [  ], [ 1 ] ] ] ],
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ], 
              [ [ [ 0 ], [ 1, 2 ], [ 0 ] ], [ [  ], [ 2 ], [  ] ],
              [ [ 1 ], [ 0, 2 ], [ 1 ] ] ] ],
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ], 
              [ [ [ 0 ], [ 2, 1 ], [ 0 ] ], [ [  ], [ 1 ], [  ] ],
              [ [ 2 ], [ 0, 1 ], [ 2 ] ] ] ], 
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ],
              [ [ [ 1 ], [  ], [  ] ], [ [ 0, 1 ], [ 2 ], [ 2 ] ],
              [ [ 2, 1 ], [ 0 ], [ 0 ] ] ] ], 
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ],
              [ [ [ 1 ], [  ], [  ] ], [ [ 2, 1 ], [ 0 ], [ 0 ] ],
              [ [ 0, 1 ], [ 2 ], [ 2 ] ] ] ], 
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ],
              [ [ [ 1 ], [ 1 ], [ 0, 2 ] ], [ [ 0 ], [ 0 ], [ 1, 2 ] ],
              [ [  ], [  ], [ 2 ] ] ] ], 
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ],
              [ [ [ 1 ], [ 1 ], [ 2, 0 ] ], [ [ 2 ], [ 2 ], [ 1, 0 ] ],
              [ [  ], [  ], [ 0 ] ] ] ],
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ], 
              [ [ [ 1 ], [ 0, 2 ], [ 1 ] ], [ [  ], [ 2 ], [  ] ], 
              [ [ 0 ], [ 1, 2 ], [ 0 ] ] ] ],
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ], 
              [ [ [ 1 ], [ 2, 0 ], [ 1 ] ], [ [  ], [ 0 ], [  ] ],
              [ [ 2 ], [ 1, 0 ], [ 2 ] ] ] ],
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ], 
              [ [ [ 2 ], [  ], [  ] ], [ [ 0, 2 ], [ 1 ], [ 1 ] ],
              [ [ 1, 2 ], [ 0 ], [ 0 ] ] ] ], 
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ],
              [ [ [ 2 ], [  ], [  ] ], [ [ 1, 2 ], [ 0 ], [ 0 ] ],
              [ [ 0, 2 ], [ 1 ], [ 1 ] ] ] ],
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ], 
              [ [ [ 2 ], [ 2 ], [ 0, 1 ] ], [ [ 0 ], [ 0 ], [ 2, 1 ] ],
              [ [  ], [  ], [ 1 ] ] ] ],
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ], 
              [ [ [ 2 ], [ 2 ], [ 1, 0 ] ], [ [ 1 ], [ 1 ], [ 2, 0 ] ],
              [ [  ], [  ], [ 0 ] ] ] ],
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ], 
              [ [ [ 2 ], [ 0, 1 ], [ 2 ] ], [ [  ], [ 1 ], [  ] ],
              [ [ 0 ], [ 2, 1 ], [ 0 ] ] ] ], 
            [ [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ],
              [ [ [ 2 ], [ 1, 0 ], [ 2 ] ], [ [  ], [ 0 ], [  ] ],
              [ [ 1 ], [ 2, 0 ], [ 1 ] ] ] ] ];
  return Transducer(3, 3, data[i][1], data[i][2]);
end);


InstallMethod(L2SmallCommutators, "for a positive integer",
[IsPosInt],
function(n)
  if n = 1 then
    return [Transducer(2, 2, [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 6, 7 ],
                               [ 1, 2 ], [ 1, 2 ], [ 1, 8 ], [ 1, 8 ] ],
                             [ [ [ 0 ], [ 1 ] ], [ [  ], [  ] ],
                               [ [  ], [ 0, 1 ] ], [ [  ], [ 1 ] ], 
                               [ [ 1, 1, 0 ], [ 0, 0, 1 ] ],
                               [ [ 0, 0, 0 ], [ 1, 0, 1 ] ],
                               [ [ 0, 0 ], [ 1, 1 ] ], 
                               [ [ 0 ], [ 1 ] ] ]),
            [22, 12], [22, 21], [22, 3], [12, 3], [12, 21]];
  elif n = 2 then
    return [Transducer(2, 2, [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 6, 7 ],
                               [ 1, 2 ], [ 1, 2 ], [ 1, 8 ], [ 1, 8 ] ],
                             [ [ [ 0 ], [ 1 ] ], [ [  ], [  ] ],
                               [ [  ], [ 0, 1 ] ], [ [ 1 ], [  ] ], 
                               [ [ 1, 0, 0 ], [ 0, 0, 1 ] ],
                               [ [ 1, 0 ], [ 0, 1 ] ],
                               [ [ 0, 0, 0 ], [ 1, 1, 1 ] ], 
                               [ [ 0 ], [ 1 ] ] ]),
           [3, 22], [3, 12], [21, 22], [21, 12], [12, 22]];
  elif n = 3 then
    return [Transducer(2, 2, [ [ 1, 2 ], [ 3, 2 ], [ 4, 5 ], [ 6, 7 ],
                               [ 3, 8 ], [ 1, 2 ], [ 3, 2 ], [ 3, 2 ] ],
                             [ [ [ 0 ], [ 1 ] ], [ [ 0 ], [ 1 ] ],
                               [ [  ], [  ] ], [ [  ], [ 0 ] ],
                               [ [ 1, 0 ], [  ] ], 
                               [ [ 0, 0, 0 ], [ 1, 1, 1 ] ],
                               [ [ 1, 0 ], [ 0, 1 ] ],
                               [ [ 1, 1, 0 ], [ 0, 1, 1 ] ] ]),
            [24, 13], [13, 23], [4, 23], [4, 13], [24, 23]];
  elif n = 4 then
    return [Transducer(2, 2, [ [ 1, 2 ], [ 3, 2 ], [ 4, 5 ], [ 6, 7 ],
                               [ 3, 8 ], [ 1, 2 ], [ 3, 2 ], [ 3, 2 ] ],
                             [ [ [ 0 ], [ 1 ] ], [ [ 0 ], [ 1 ] ],
                               [ [  ], [  ] ], [ [ 0 ], [  ] ],
                               [ [ 1, 0 ], [  ] ], [ [ 0, 0 ], [ 1, 1 ] ],
                               [ [ 0, 1, 0 ], [ 1, 1, 1 ] ],
                               [ [ 1, 1, 0 ], [ 0, 0, 1 ] ] ]),
            [13, 4], [13, 24], [23, 4], [23, 13], [23, 24]];
  elif n = 5 then
    return [Transducer(2, 2, [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ], [ 3, 7 ],
                               [ 1, 8 ], [ 3, 9 ], [ 3, 10 ], [ 3, 4 ],
                               [ 3, 7 ], [ 3, 10 ] ],
                             [ [ [ 0 ], [  ] ], [ [ 1, 1, 0 ], [  ] ],
                               [ [  ], [  ] ], [ [ 1, 1, 1, 0 ], [ 0 ] ], 
                               [ [ 0 ], [  ] ], [ [ 1, 0 ], [  ] ],
                               [ [ 0, 0, 1, 0 ], [ 1, 1, 1, 1 ] ],
                               [ [ 0, 1, 0 ], [  ] ], 
                               [ [ 1, 1, 0 ], [  ] ], [ [ 0 ], [ 1 ] ] ]),
            [7, 43], [7, 36], [19, 36], [19, 43], [36, 43]];
  elif n = 6 then
    return [Transducer(2, 2, [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ], [ 3, 7 ],
                               [ 1, 8 ], [ 3, 9 ], [ 3, 10 ], [ 3, 4 ],
                               [ 3, 7 ], [ 3, 10 ] ],
                             [ [ [ 0 ], [  ] ], [ [ 1, 1, 1, 0 ], [ 0, 0 ] ],
                               [ [  ], [  ] ], [ [ 0, 1, 0 ], [  ] ], 
                               [ [  ], [ 0 ] ], [ [ 1, 0 ], [  ] ],
                               [ [ 0, 1, 1, 0 ], [ 1, 1, 1, 1 ] ],
                               [ [ 1, 0 ], [  ] ],  [ [ 1, 1, 0 ], [  ] ],
                               [ [ 0 ], [ 1 ] ] ]),
            [36, 7], [36, 19], [43, 19], [43, 36], [43, 7]];
  elif n = 7 then
    return [Transducer(2, 2, [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 6, 7 ],
                               [ 8, 2 ], [ 9, 2 ], [ 10, 7 ], [ 1, 2 ],
                               [ 8, 2 ], [ 9, 2 ] ],
                             [ [ [ 0 ], [ 1 ] ], [ [  ], [  ] ],
                               [ [  ], [ 0, 1 ] ], [ [  ], [ 1 ] ],
                               [ [  ], [ 0, 0, 1 ] ], 
                               [ [  ], [ 1, 0, 1 ] ], [ [  ], [ 1 ] ],
                               [ [ 0, 0, 0, 0 ], [ 1, 1, 0, 1 ] ], 
                               [ [ 1 ], [ 0, 0, 0, 1 ] ],
                               [ [  ], [ 0, 0, 1 ] ] ]),
            [8, 37], [8, 44], [26, 37], [26, 44], [37, 44]];
  elif n = 8 then
    return [Transducer(2, 2, [ [ 1, 2 ], [ 3, 4 ], [ 5, 2 ], [ 6, 7 ],
                               [ 8, 2 ], [ 9, 2 ], [ 10, 7 ], [ 1, 2 ],
                               [ 8, 2 ],   [ 9, 2 ] ],
                             [ [ [ 0 ], [ 1 ] ], [ [  ], [  ] ],
                               [ [  ], [ 0, 1 ] ], [ [ 1 ], [  ] ],
                               [ [  ], [ 0, 0, 1 ] ], 
                               [ [  ], [ 0, 1 ] ], [ [  ], [ 1 ] ],
                               [ [ 0, 0, 0, 0 ], [ 1, 0, 0, 1 ] ],
                               [ [  ], [ 1, 0, 1 ] ],
                               [ [ 1, 1 ], [ 0, 0, 0, 1 ] ] ]),
            [37, 26], [37, 8], [44, 8], [44, 26], [44, 37]];
  fi;


end);

InstallMethod(ListToListCode, "for a list",
[IsDenseList],
function(L)
  local str, newstr, elt;
  str := "    DataList := [];";
  for elt in L do
    newstr := "";
    Append(newstr, Concatenation("\n    Add(DataList, ", String(elt), ")"));
    while Size(newstr)> 75 do
      Append(str, newstr{[1 .. 70]});
      newstr := newstr{[71 .. Size(newstr)]};
      Append(str, "\n  ");
    od;
    Append(str, newstr);
    Append(str, ";\n");
  od;
  return str;
end);
